/* Цель данного урока - научиться тестированию кода. Т.е. сравнени 
того что получилось с тем что должо было получиться
Как правило тестирование делается при помощи Unit тестов. 
Для как обычно самостоятельного обучения, т.к. обычно на курсе GB нихера нормально не объясняют надо обязательно скачать
и протестировать самостоятельно некое приложение Selenium которое делает бота имитирующего действия пользователя для 
тестирования готового сайта. Т.е. в этот бот в теории вписывает те рутинные действия которые делает пользователь. Для экономии 
времени на выполенние одних и тех же задач
В данном курсе рассматривается исключительно тесты при помощи фреймворка Jasmin. Он является пакетом npm 
ставим локально npm i jasmine а потом обязательно еще и глобально npm i jasmine -g чтобы запускать тесты в любом месте проекта
Все вышеустановленное предназначено исключительно для тестирования бэкэнда. Для фронтенда надо поставить другую библиотеку
1) npm init --yes
2) npm i jasmine
3) npm i jasmine -g
4) npm i jasmine-core 

5) jasmine init - команда начала тестирования. Создает папку spec>support>и файл jasmine.json. Работает только из gitbash 
создает файл spec>support>jasmine.json в котором отражаются настройки тестирования по умолчанию 

6) сами тесты создаются в виде файлов - name.spec.js в папке spec 

7) команда jasmine в терминале - запуск теста. Результать успешного выполнения Started и точка внизу этой надписи, 
в случае ошибки сообщение ошибки будет выведено в поле Failures: в терминал в случае ошибки сообщение ошибки будет 
выведено в поле Failures: в термина.

8) команда jasmine spec/calc.spec.js - так можно указать отдельный файл для тестирования чтобы модуль не фигачил все подряд.

9) также в файле package.json в разделе scripts можно прописать название модуля который надо тестировать и путь до него вот так:
"scripts": {"modulName": "jasmine spec/calc.spec.js"} Запуск теста в этом случае будет командой  npm run modulName

10) Тестирование модулей: создаем файлы с расширениями .js в которых пишем функции, далее в папке spec создаем файл 
в который подключаем созданные файлы с функциями по ссылке в переменные и пишем тесты для них.

11) в пакете тестирования jasmine много методов которые тупо не рассматриваются в этом убогом уроке от GeekBrains и 
прохождение этого говноурока не позволит приступить к самостоятельной работе с jasmine поэтому вот ссылка на полное описание 
методов пакета тестирования jasmine - https://jasmine.github.io/api/edge/matchers 

12) рекомендации по тестированию - тестируются все публичные методы проекта прежде чем выпускать делать проект доступным для пользователя 

13) приватные методы тестировать не принятно, но если нужно то в публичный метод пишем приватный и таким образом тестируем */
